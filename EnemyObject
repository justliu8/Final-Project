import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;

/**
 * Write a description of class EnemyObject here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class EnemyObject extends UserObject
{
    private double currentX, currentY, finalX, finalY, xSpeed, ySpeed, angle, speed;
    private int fWidth, fHeight;
    private Color color;

    public EnemyObject(int radius, int fWidth, int fHeight, int x, int y, Color color, double speed) {
        super(radius, x, y, color);

        this.color = color;

        this.fWidth = fWidth;
        this.fHeight = fHeight;

        currentX = x;
        currentY = y;

        finalX = Math.random() * fWidth;
        finalY = Math.random() * (fHeight - 30);
        angle = Math.atan(Math.abs(finalY - currentY) / Math.abs(finalX - currentX));

        this.speed = speed;

        if(finalX > currentX)
            xSpeed = Math.cos(angle) * speed;
        else
            xSpeed = -Math.cos(angle) * speed;
        if(finalY > currentY)
            ySpeed =  Math.sin(angle) * speed;
        else
            ySpeed = -Math.sin(angle) * speed;
    }

    /**
    Draws the object.
    @param g2 the graphics context
     */
    public void draw(Graphics2D g2) {
        if(this.getName().equals("Pinata")) {
             Ellipse2D.Double circle = new Ellipse2D.Double(currentX - 25, currentY - 25, 2 * super.getRadius(), 2 * super.getRadius());
            //could be any object, doesn't have to be an ellipse
            g2.setColor(color);
            g2.draw(circle);

            g2.setPaint(color);
            g2.fill(circle);

            //         Line2D.Double segment=new Line2D.Double(xLeft-radius/2, yTop-radius/2, xLeft-radius/2+5, yTop-radius/2);
            //         Line2D.Double segment2=new Line2D.Double(xLeft+radius/2, yTop-radius/2, xLeft+radius/2-5, yTop-radius/2);

            g2.setColor(Color.WHITE);
            //         g2.draw(segment);
            //         g2.draw(segment2);
            g2.drawArc((int)currentX-super.getRadius()/2+55, (int)currentY-super.getRadius()/2+70, (int)super.getRadius()/2-2, (int)super.getRadius()/2-2, 0, 180);
            g2.drawArc((int)currentX+super.getRadius()/2+45, (int)currentY-super.getRadius()/2+70, (int)super.getRadius()/2-2, (int)super.getRadius()/2-2, 0, 180);
            g2.drawArc((int)currentX-super.getRadius()/2+75, (int)currentY+super.getRadius()/2+50, (int)super.getRadius(), (int)super.getRadius()/2, 180,180);
        }else if(super.getMaxHp() > 6) {
            //             Ellipse2D.Double circle = new Ellipse2D.Double(currentX - 25, currentY - 25, 2 * super.getRadius(), 2 * super.getRadius());
            //             g2.setColor(color);
            //             g2.draw(circle);
            //             g2.setPaint(color);
            //             g2.fill(circle);
            Ellipse2D.Double circle = new Ellipse2D.Double(currentX - 25, currentY - 25, 2 * super.getRadius(), 2 * super.getRadius());
            //could be any object, doesn't have to be an ellipse
            Ellipse2D.Double circle2 = new Ellipse2D.Double(currentX - getRadius()/2+70, currentY+60 , 20, 20);
            Ellipse2D.Double circle3 = new Ellipse2D.Double(currentX + getRadius()/2+60, currentY+60 , 20, 20);
            g2.setColor(color);
            g2.draw(circle);

            g2.setPaint(color);
            g2.fill(circle);

            g2.setColor(Color.WHITE);
            Line2D.Double segment=new Line2D.Double(getX(), getY(), getX()-getRadius()/2, getY()-getRadius()/2);
            Line2D.Double segment2=new Line2D.Double(getX(), getY(), getX()+getRadius()/2, getY()-getRadius()/2);
            g2.draw(segment);
            g2.draw(segment2);
            g2.fill(circle3);
            g2.fill(circle2);
            //         g2.drawArc((int)getX()-getRadius()/2-5, (int)getY()-getRadius()/2, (int)getRadius()/2-2, (int)getRadius()/2-2, 180, 180);
            //         g2.drawArc((int)getX()+getRadius()/2-5, (int)getY()-getRadius()/2, (int)getRadius()/2-2, (int)getRadius()/2-2, 180, 180);
            g2.drawArc((int)getX()-getRadius()/2, (int)getY()+getRadius()/2, (int)getRadius(), (int)getRadius()/2, 0,180);
        } else {
            Ellipse2D.Double circle = new Ellipse2D.Double(currentX - 25, currentY - 25, 2 * super.getRadius(), 2 * super.getRadius());
            //could be any object, doesn't have to be an ellipse
            Ellipse2D.Double circle2 = new Ellipse2D.Double(currentX - getRadius()/2, currentY , 5, 5);
            Ellipse2D.Double circle3 = new Ellipse2D.Double(currentX + getRadius()/2-5, currentY , 5, 5);
            g2.setColor(color);
            g2.draw(circle);

            g2.setPaint(color);
            g2.fill(circle);

            g2.setColor(Color.WHITE);
            Line2D.Double segment=new Line2D.Double(getX(), getY(), getX()-getRadius(), getY()-getRadius());
            Line2D.Double segment2=new Line2D.Double(getX(), getY(), getX()+getRadius(), getY()-getRadius());
            g2.draw(segment);
            g2.draw(segment2);
            g2.fill(circle3);
            g2.fill(circle2);
            //         g2.drawArc((int)getX()-getRadius()/2-5, (int)getY()-getRadius()/2, (int)getRadius()/2-2, (int)getRadius()/2-2, 180, 180);
            //         g2.drawArc((int)getX()+getRadius()/2-5, (int)getY()-getRadius()/2, (int)getRadius()/2-2, (int)getRadius()/2-2, 180, 180);
            g2.drawArc((int)getX()-getRadius()/2, (int)getY()+getRadius()/2, (int)getRadius(), (int)getRadius()/2, 0,180);
        }
    }

    /**
     *Moves a enemy object along its path. 
     *
     *@param g2 the Graphics2D
     *@return void
     */
    public void move() {
        currentX += xSpeed;
        currentY += ySpeed;
        moveBy(xSpeed, ySpeed);
        if(Math.abs(currentX - finalX) < 10 && Math.abs(currentY - finalY) < 10) {
            finalX = 20 + Math.random() * (fWidth - 40);
            finalY = 20 + Math.random() * (fHeight - 70);
            angle = Math.atan(Math.abs(finalY - currentY) / Math.abs(finalX - currentX));
            if(finalX > currentX)
                xSpeed = Math.cos(angle) * speed;
            else
                xSpeed = -Math.cos(angle) * speed;
            if(finalY > currentY)
                ySpeed =  Math.sin(angle) * speed;
            else
                ySpeed = -Math.sin(angle) * speed;
        }
    }

    public double getCurrentX() {
        return currentX + 75;
    }

    public double getCurrentY() {
        return currentY + 70;
    }
}
