import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.Font;
import java.awt.Rectangle;

import java.util.ArrayList;

import javax.swing.JComponent;

import java.text.DecimalFormat;

/**
 * Draws the user.
 *
 * @author (Thanatcha Panpairoj, Justin Liu)
 * @version (5/19/15)
 */
public class GameComponent extends JComponent 
{
    private UserObject user;
    private GridObject grid;

    private boolean left, right, up, down, firing, autofire, game, newShotModeDisplayed;
    private int fWidth, fHeight, framesToDisplayInstructions, framesToDisplayShotMode, framesToDisplayNewShotMode, shotClock, enemyClock, previousTCount, score, difficulty, lastShotAngle, enemiesDestroyed, bossesDestroyed, shotsFired, shotsHit, shotMode;
    private double mouseX, mouseY, time;

    private ArrayList<ProjectileObject> userProjectiles;
    private ArrayList<ProjectileObject> enemyProjectiles;
    private ArrayList<EnemyObject> enemies;
    private ArrayList<Boss> bosses;
    private ArrayList<Integer> enemyShotClock;
    private ArrayList<Integer> bossShotClock;

    /**
     * Initializes user object component. Sets the time to display the control instructions to 10 seconds(600 frames)
     * Sets up a grid background and creates other game objects.
     * 
     * @param frameWidth   the width of the frame.
     * @param frameHeight  the height of the frame.
     *
     */
    public GameComponent(int frameWidth, int frameHeight) {
        user = new UserObject(25, frameWidth / 2, frameHeight / 2, Color.BLUE);
        score = 0;

        grid = new GridObject(frameWidth, frameHeight);

        fWidth = frameWidth;
        fHeight = frameHeight;

        framesToDisplayInstructions = 600;
        framesToDisplayShotMode = 0;
        framesToDisplayNewShotMode = 0;

        shotClock = 0;
        enemyClock = 0;
        previousTCount = 0;
        time = 0;
        lastShotAngle = 0;
        shotsFired = 0;
        shotsHit = 0;
        shotMode = 0;
// 
//         difficulty = 2147400000;
//         for(int i = 1; i < 20; i++)
//             user.addXp(2000 * i);//sets the user level to max(for testing)
//         user.changeHp(64);
//         score = 100000;

        //difficulty = 1000000000;
        //difficulty = 0;

        userProjectiles = new ArrayList<ProjectileObject>();
        enemyProjectiles = new ArrayList<ProjectileObject>();
        enemies = new ArrayList<EnemyObject>();
        bosses = new ArrayList<Boss>();
        enemyShotClock = new ArrayList<Integer>();
        bossShotClock = new ArrayList<Integer>();

        game = true;
    }

    /**
     * Draws all the object component. Including the user, projectiles, and enemies. This paintComponent
     * method gets called every 1000 / 60 millisecond so it updates 60 times per 1000 millisecond.
     *
     * @param g Graphics
     * @return void
     */
    public void paintComponent(Graphics g)
    {
        Graphics2D g2 = (Graphics2D) g;

        game = user.getHp() != 0;

        try{
            int userLevel = user.getLevel();
            if(score >= 10000000)
                changeShotMode(2);
            if(!newShotModeDisplayed && userLevel == 10) {
                newShotModeDisplayed = true;
                framesToDisplayNewShotMode = 500;
            }
            if(game) {
                time += 1.0 / 60;
                if((int)(time % (11 - userLevel / 2)) == 0 && (int)(time) != previousTCount) {
                    user.changeHp(1 + userLevel / 8);
                    previousTCount = (int)time;
                }
                if(time % (int)time < userLevel * 1.0 / 60) {
                    user.changeStamina(1);
                }
            }

            if(difficulty < 1000000000)
                difficulty += 400000;
            else if(difficulty < 1500000000)
                difficulty += 150000;
            else if(difficulty < 1750000000)
                difficulty += 100000;
            else if(difficulty < 2147400000)
                difficulty += 50000;

            grid.draw(g2, fWidth, fHeight);
            for(int e = 0; e < enemies.size(); e++) {
                EnemyObject enemy = enemies.get(e);
                enemy.draw(g2);
                if(game) {
                    enemyShoot(e, enemy.getX(), enemy.getY(), 60);
                    enemy.move();
                }
            }

            for(int p = 0; p < userProjectiles.size(); p++) {
                ProjectileObject projectile = userProjectiles.get(p);
                double x = projectile.getX();
                double y = projectile.getY();

                projectile.draw(g2);
                if(x >= 0 && x <= fWidth && y >= 0 && y <= fHeight && projectile.getDisplacement() <= projectile.getRange()) {
                    boolean hit = false;
                    for(int b = 0; b < bosses.size(); b++) {
                        Boss boss = bosses.get(b);
                        if(Math.pow(boss.getX() - x, 2) + Math.pow(boss.getY() - y, 2) < 10000) {//100^2 = 10000, 100 is the radius of the EnemyObject
                            boss.changeHp(-projectile.getDamage());
                            userProjectiles.remove(p--);
                            hit = true;
                            shotsHit++;
                            if(boss.getHp() == 0) {
                                int points = 10 + 20 * (difficulty / 5000000);
                                if(boss.getName().equals("Pinata"))
                                    points *= 2;
                                updateScore(points);
                                user.addXp(points);
                                bossShotClock.remove(b);
                                bosses.remove(b--);
                                bossesDestroyed++;
                                break;
                            }
                        }
                    }

                    if(!hit) {
                        for(int e = 0; e < enemies.size(); e++) {
                            EnemyObject enemy = enemies.get(e);
                            if(Math.pow(enemy.getX() - x, 2) + Math.pow(enemy.getY() - y, 2) < 625) {//25^2 = 625, 25 is the radius of the EnemyObject
                                shotsHit++;
                                enemies.remove(e);
                                enemyShotClock.remove(e--);
                                userProjectiles.remove(p--);
                                int points = 10 + (difficulty / 5000000);
                                updateScore(points);
                                user.addXp(points);
                                enemiesDestroyed++;
                                break;
                            }
                        }
                    }
                    projectile.draw(g2);
                    if(game)
                        projectile.move();
                } else
                    userProjectiles.remove(p--);
            }

            for(int p = 0; p < enemyProjectiles.size(); p++) {
                ProjectileObject projectile = enemyProjectiles.get(p);
                double x = projectile.getX();
                double y = projectile.getY();
                boolean blocked = false;

                double lightsaberAngle = 0;
                double reflectedAngle = 0;
                if(shotMode == 2)
                    for(ProjectileObject userProjectile : userProjectiles)
                        if(userProjectile.getColor().equals(new Color(99, 184, 255)) && Math.abs(userProjectile.getX() - x) < 10 && Math.abs(userProjectile.getY() - y) < 10) {
                            blocked = true;
                            lightsaberAngle = userProjectile.getAngle() * 180 / Math.PI;
                            reflectedAngle = lightsaberAngle - 180 + lightsaberAngle - (projectile.getAngle() * 180 / Math.PI + 180);
                            if(userProjectile.getDisplacement() > 85)
                                reflectedAngle = projectile.getAngle() * 180 / Math.PI + 180;
                        }

                if(!blocked && x >= -20 && x <= fWidth + 20 && y >= -20 && y <= fHeight + 20) {
                    projectile.draw(g2);
                    if(game)
                        if(projectile.getAmplitude() != 0)
                            projectile.move2();
                        else
                            projectile.move();
                    projectile.draw(g2);
                    if(game)
                        projectile.move();
                    if(Math.pow(user.getX() - x, 2) + Math.pow(user.getY() - y, 2) < Math.pow(projectile.getRadius(), 2)) {//distance formula to check if the user is within the projectile radius
                        user.changeHp(-projectile.getDamage());
                        if(game)
                            enemyProjectiles.remove(p--);
                    }
                    for(int b = 0; b < bosses.size(); b++) {
                        Boss boss = bosses.get(b);
                        if(boss.getName() == "Pinata" && Math.pow(boss.getX() - x, 2) + Math.pow(boss.getY() - y, 2) < 10000) {//100^2 = 10000, 100 is the radius of the EnemyObject
                            enemyProjectiles.remove(p--);
                            break;
                        }
                    }
                } else 
                    enemyProjectiles.remove(p--);

                if(blocked) {
                    userProjectiles.add(new ProjectileObject(projectile.getRadius(), projectile.getDamage(), projectile.getColor(), x, y, reflectedAngle, 2 * projectile.getSpeed()));
                }
            }

            for(int b = 0; b < bosses.size(); b++) {
                Boss boss = bosses.get(b);
                boss.draw(g2);
                if(game) {
                    if(bossShotClock.get(b) < 15)
                        if(boss.getName() == "Jack Weng")
                            bossShoot(b, boss.getX(), boss.getY(), 14);
                        else if(boss.getName() == "Ms Jaime")
                            bossShoot(b, boss.getX(), boss.getY(), 2);
                        else
                            bossShoot(b, boss.getX(), boss.getY(), 3);
                    else
                        bossShotClock.set(b, bossShotClock.get(b) - 1);
                    boss.move();
                }
            }

            if(game)
                user.draw(g2);
            else {
                Rectangle back = new Rectangle(0, 0, fWidth, fHeight);
                g2.setColor(new Color(1f, 1f, 1f, 0.4f));
                g2.fill(back);

                g2.setPaint(Color.BLACK);
                g2.setFont (new Font (Font.SANS_SERIF, Font.BOLD, 100));
                g2.drawString("GAME OVER", fWidth / 2 - 300, fHeight / 2 - 50);

                g2.setFont (new Font (Font.SANS_SERIF, Font.BOLD, 40));
                g2.drawString("SCORE: " + score, fWidth / 2 - 120, fHeight / 2 + 80);

                g2.setFont (new Font (Font.SANS_SERIF, Font.BOLD, 20));
                g2.drawString("Enemies destroyed: " + enemiesDestroyed, fWidth / 2 - 120, fHeight / 2 + 110);
                g2.drawString("Bosses destroyed: " + bossesDestroyed, fWidth / 2 - 120, fHeight / 2 + 140);

                int accuracy = 0;
                if(shotsFired!= 0 && shotsFired == shotsHit)
                    accuracy = 100;
                else if(shotsFired != 0)
                    accuracy = (int)(shotsHit * 100.0 / shotsFired);
                g2.drawString("Acuracy: " + accuracy + "%", fWidth / 2 - 120, fHeight / 2 + 170);

                g2.setPaint(new Color(200, 200, 200));
                if(score < 100000)
                {
                    g2.setFont (new Font (Font.SANS_SERIF, Font.BOLD, 100));
                    g2.drawString("DIDN'T GET FAR, TRY AGAIN?" , fWidth/2-670, fHeight/2 - 150);
                }
                else if(score < 500000)
                {
                    g2.setFont (new Font (Font.SANS_SERIF, Font.BOLD, 100));
                    g2.drawString("GREAT SCORE" , fWidth/2-350, fHeight/2 - 150);
                }
                else
                {
                    g2.setFont (new Font (Font.SANS_SERIF, Font.BOLD, 100));
                    g2.drawString("YOU'RE A GOD" , fWidth/2-350, fHeight/2 - 150);
                }
            }

            //paintStats(g2);

            if(userLevel != 20) {
                Rectangle xpBar = new Rectangle(25, 11, (int)(600 * (((double)user.getXp()) / user.getMaxXp())), 3);
                g2.setPaint(new Color(0, 191, 255));
                g2.fill(xpBar);
                g2.draw(xpBar);
            } else if(userLevel == 20 && shotMode != 2) {
                Rectangle xpBar = new Rectangle(25, 11, (int)(600 * ((score) / 10000000.0)), 3);
                g2.setPaint(new Color(0, 191, 255));
                g2.fill(xpBar);
                g2.draw(xpBar);
            }

            Rectangle hpBar = new Rectangle(25, 15, (int)(600 * (((double)user.getHp()) / user.getMaxHp())), 30);
            g2.setPaint(new Color(210, 0, 0));
            g2.fill(hpBar);
            g2.draw(hpBar);

            //Rectangle staminaBar = new Rectangle(25, 60, (int)(600 * (((double)user.getStamina()) / user.getMaxStamina())), 30);
            Rectangle staminaBar = new Rectangle(25, 46, (int)(600 * (((double)user.getStamina()) / user.getMaxStamina())), 4);
            g2.setPaint(new Color(255, 215, 0));
            g2.fill(staminaBar);
            g2.draw(staminaBar);

            g2.setPaint(Color.BLACK);
            g2.setFont (new Font (Font.SANS_SERIF, Font.BOLD, 25));
            g2.drawString("SCORE: " + score, 30, fHeight - 50);

            g2.drawString("HP: " + user.getHp() + " / " + user.getMaxHp(), 30, 40);

            //g2.drawString("Stamina: " + user.getStamina() + " / " + user.getMaxStamina(), 30, 85);

            if(shotMode == 2)
                g2.drawString("Level: 21", fWidth - 123, 40);
            else
                g2.drawString("Level: " + userLevel, fWidth - 123, 40);

            DecimalFormat df = new DecimalFormat("00");
            g2.drawString(df.format((int)time / 60) + ":" + df.format((int)time % 60), fWidth - 100, fHeight - 50);

            if(framesToDisplayInstructions > 0) {
                if(framesToDisplayInstructions <= 210) {
                    int colorNum = 210 - framesToDisplayInstructions;
                    g2.setColor(new Color(colorNum, colorNum, colorNum));
                }
                g2.drawString("WASD to move, F or hold mouse to shoot", fWidth / 2 - 225, fHeight / 2 - 70);
                g2.drawString("V or hold SPACEBAR for quadruple speed. Uses stamina.", fWidth / 2 - 300, fHeight / 2 + 70);
                g2.drawString("ESC to pause and unpause.", fWidth / 2 - 125, fHeight / 2 + 120);
                framesToDisplayInstructions--;
            }
            if(framesToDisplayShotMode > 0) {
                int colorNum = 210 - framesToDisplayShotMode;
                g2.setColor(new Color(colorNum, colorNum, colorNum));
                if(shotMode == 0)
                    g2.drawString("Regular shots", fWidth / 2 - 75, fHeight / 2);
                else if(shotMode == 1)
                    g2.drawString("3 shots at 50% fire rate", fWidth / 2 - 115, fHeight / 2);
                else if(shotMode == 2)
                    g2.drawString("Lightsaber", fWidth / 2 - 60, fHeight / 2);
                framesToDisplayShotMode--;
            }
            if(framesToDisplayNewShotMode > 0) {
                g2.setColor(Color.RED);
                g2.drawString("New firing mode, scroll to switch", fWidth - 400, 75);
                framesToDisplayNewShotMode--;
            }
        } 
        catch (java.lang.ArrayIndexOutOfBoundsException ex) {

        }
    }

    /**
     * Moves user object by an amount. Prevents going off screen.
     *
     * @param dx change in x
     * @param dy change in y
     * @return void
     */
    public void moveBy(boolean isSpacebar, double dx, double dy) {
        double newX = user.getX() + dx;
        double newY = user.getY() + dy;
        if(newX <= getWidth() - 25 && newX >= 25) 
            user.moveBy(dx, 0);
        if(newY <= getHeight() - 25 && newY >= 25) 
            user.moveBy(0, dy);
        if (isSpacebar)
            user.changeStamina(-1);
    }

    /**
     * Updates the known location of the mouse. Used to test shooting.
     * 
     * @param mouseX the x coordinate of the mouse
     * @param mouseY the y coordinate of the mouse
     * @return void
     */
    public void updateMouse(double mouseX, double mouseY) {
        this.mouseX = mouseX;
        this.mouseY = mouseY;
    }

    /**
     * For testing movement keys. Updates which keys are pressed.
     *
     * @param left boolean indicating if the left arrow key is pressed
     * @param right boolean indicating if the right arrow key is pressed
     * @param up boolean indicating if the up arrow key is pressed
     * @param down boolean indicating if the down arrow key is pressed
     * @return void
     */
    public void updateKeys(boolean left, boolean right, boolean up, boolean down, boolean firing, boolean autofire) {
        this.left = left;
        this.right = right;
        this.up = up;
        this.down = down;
        this.firing = firing;
        this.autofire = autofire;
    }

    /**
     * Updates the known size of the frame.
     * 
     * @param frameWidth    width of the frame
     * @param frameHeight   height of the frame
     * @return void
     */
    public void updateSize(int frameWidth, int frameHeight) {
        fWidth = frameWidth;
        fHeight = frameHeight;
    }

    /**
     * Updates the player's socre.
     * 
     * @param dScore the change in score
     * @return void
     */
    public void updateScore(int dScore) {
        score += dScore;
    }

    /**
     * For testing movement and shooting. Displays which keys are pressed and the mouse coordinates.
     * Also displays game info.
     * @param g2 Graphics context
     * @return void
     */
    public void paintStats(Graphics g2) {
        g2.setFont(new Font("TimesRoman", Font.PLAIN, 12)); 
        g2.setColor(Color.BLACK);
        g2.drawString("Left: " + left, 125, 150);
        g2.drawString("Right: " + right, 125, 250);
        g2.drawString("Up: " + up, 125, 350);
        g2.drawString("Down: " + down, 125, 450);
        g2.drawString("Firing: " + firing, 125, 550);
        g2.drawString("Autofire: " + autofire, 125, 650);
        g2.drawString("MouseX: " + mouseX, 210, 150);
        g2.drawString("MouseY: " + mouseY, 210, 250);

        DecimalFormat df = new DecimalFormat("0,000,000,000");

        g2.drawString("Difficulty: " + df.format(difficulty) + "/ 2,147,400,000", 210, 350);
        g2.drawString("Projectiles: " + enemyProjectiles.size() + userProjectiles.size(), 210, 450);
        g2.drawString("Enemies: " + enemies.size(), 210, 550);
    }

    /**
     * Shoots projectiles and adjusts the fire rate.
     * 
     * @param mouseX    the x-coordinate of the mouse
     * @param mouseY    the y-coordinate of the mouse
     * @param frameDelay    shoots a projectile every frameDelay frames
     * @return void
     */
    public void userShoot(double mouseX, double mouseY, int frameDelay) {
        if(game) {
            if(shotMode == 0) {
                frameDelay -= (user.getLevel() - 2) / 2;
                this.mouseX = mouseX;
                this.mouseY = mouseY;
                shotClock++;
                shotClock %= frameDelay;
                if(shotClock == 0) {
                    //                 double userX = user.getX();
                    //                 double userY = user.getY();
                    //                 ProjectileObject middleProjectile = new ProjectileObject(Color.GREEN, userX, userY, mouseX, mouseY, 45);
                    //                 double angle = middleProjectile.getAngle() * 180 / Math.PI;
                    //                 userProjectiles.add(middleProjectile);
                    //                 userProjectiles.add(new ProjectileObject(Color.GREEN, userX, userY, angle + 15, 45));
                    //                 userProjectiles.add(new ProjectileObject(Color.GREEN, userX, userY, angle - 15, 45));

                    //                 userProjectiles.add(new ProjectileObject(50, 10, 1, Color.GREEN, user.getX(), user.getY(), mouseX, mouseY, 15 + user.getLevel() * 1.5));
                    //                 userProjectiles.add(new ProjectileObject(-50, 10, 1, Color.GREEN, user.getX(), user.getY(), mouseX, mouseY, 15 + user.getLevel() * 1.5));
                    userProjectiles.add(new ProjectileObject(10, 1, Color.GREEN, user.getX(), user.getY(), mouseX, mouseY, 15 + user.getLevel() * 1.5));
                    shotsFired++;
                }
            } else if(shotMode == 1) {
                frameDelay -= (user.getLevel() - 2) / 3 + 2;
                this.mouseX = mouseX;
                this.mouseY = mouseY;
                shotClock++;
                shotClock %= frameDelay;
                if(shotClock == 0) {
                    ProjectileObject middleProjectile = new ProjectileObject(true, (int)(fWidth / 2), 10, 1, Color.GREEN, user.getX(), user.getY(), mouseX, mouseY, 15 + user.getLevel() * 1.5);
                    userProjectiles.add(middleProjectile);
                    double angle = middleProjectile.getAngle() * 180 / Math.PI;
                    userProjectiles.add(new ProjectileObject((int)(fWidth / 2), true, 10, 1, Color.GREEN, user.getX(), user.getY(), angle + 18, 15 + user.getLevel() * 1.5));
                    userProjectiles.add(new ProjectileObject((int)(fWidth / 2), true, 10, 1, Color.GREEN, user.getX(), user.getY(), angle - 18, 15 + user.getLevel() * 1.5));
                    shotsFired += 3;
                }
            } else if (shotMode == 2) {
                frameDelay -= 9;
                this.mouseX = mouseX;
                this.mouseY = mouseY;
                shotClock++;
                shotClock %= frameDelay;
                if(shotClock == 0) {
                    for(int i = 10; i < 31; i++) {
                        userProjectiles.add(new ProjectileObject(true, 100, 10, 1, new Color(99, 184, 255), user.getX(), user.getY(), mouseX, mouseY, i));
                        shotsFired++;;
                    }
                }   
            }
        }
    }

    /**
     * Shoots projectiles and adjusts the fire rate.
     * 
     * @param enemyIndex    the enemy index in the enemies ArrayList 
     * @param enemyX    the x-coordinate of the enemy
     * @param enemyY    the y-coordinate of the enemy
     * @param frameDelay    shoots a projectile every frameDelay frames
     * @return void
     */
    public void enemyShoot(int enemyIndex, double enemyX, double enemyY, int frameDelay) {
        int i = (enemyShotClock.get(enemyIndex) + 1) % (frameDelay - (difficulty / 40000000));
        enemyShotClock.set(enemyIndex, new Integer(i));

        if(i == 0)
            enemyProjectiles.add(new ProjectileObject(10, 1, Color.RED, enemyX, enemyY, user.getX(), user.getY(), 5 + difficulty / 400000000));
    }

    /**
     * Shoots projectiles and adjusts the fire rate.
     * 
     * @param bossIndex    the boss index in the boss ArrayList 
     * @param bossX    the x-coordinate of the boss
     * @param bossY    the y-coordinate of the boss
     * @param frameDelay    shoots a projectile every frameDelay frames
     * @return void
     */
    public void bossShoot(int bossIndex, double bossX, double bossY, int frameDelay) {
        int i = ((bossShotClock.get(bossIndex) + 1) % frameDelay);
        bossShotClock.set(bossIndex, new Integer(i));

        if (bosses.get(bossIndex).getName() == "Justin Liu" && i == 0) {
            int speed = 5 + difficulty / 400000000;
            ProjectileObject middleProjectile = new ProjectileObject(13, 3, Color.ORANGE, bossX, bossY, user.getX(), user.getY(), speed);
            enemyProjectiles.add(middleProjectile);
            double angle = middleProjectile.getAngle() * 180 / Math.PI;
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.ORANGE, bossX, bossY, angle + 20, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.ORANGE, bossX, bossY, angle + 10, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.ORANGE, bossX, bossY, angle - 10, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.ORANGE, bossX, bossY, angle - 20, speed));
        } else if(bosses.get(bossIndex).getName() == "Thanatcha Panpairoj" && i == 0) {
            lastShotAngle -= 5;
            lastShotAngle %= 360;
            for(int p = 0; p < 6; p++)
                enemyProjectiles.add(new ProjectileObject(15, 5, new Color(128, 0, 128), bossX, bossY, 360 / 6 * p + lastShotAngle, 5));
        } else if(bosses.get(bossIndex).getName() == "Jack Weng" && i == 0) {
            int speed = 2 + difficulty / 600000000;
            ProjectileObject middleProjectile = new ProjectileObject(13, 3, Color.PINK, bossX, bossY, user.getX(), user.getY(), speed);
            enemyProjectiles.add(middleProjectile);
            double angle = middleProjectile.getAngle() * 180 / Math.PI;
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle + 12, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle + 9.6, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle + 7.2, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle + 4.8, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle + 2.4, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle - 2.4, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle - 4.8, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle - 7.2, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle - 9.6, speed));
            enemyProjectiles.add(new ProjectileObject(13, 3, Color.PINK, bossX, bossY, angle - 12, speed));
        } else if (bosses.get(bossIndex).getName() == "James Gosling" && i == 0) {
            int speed = 5 + difficulty / 400000000;
            enemyProjectiles.add(new ProjectileObject(16, 6, Color.BLACK, bossX, bossY, (int)(Math.random() * 360), speed));
            enemyProjectiles.add(new ProjectileObject(16, 6, Color.BLACK, bossX, bossY, (int)(Math.random() * 360), speed));
            enemyProjectiles.add(new ProjectileObject(16, 6, Color.BLACK, bossX, bossY, (int)(Math.random() * 360), speed));
            enemyProjectiles.add(new ProjectileObject(16, 6, Color.BLACK, bossX, bossY, (int)(Math.random() * 360), speed));
            enemyProjectiles.add(new ProjectileObject(16, 6, Color.BLACK, bossX, bossY, (int)(Math.random() * 360), speed));
        } else if (bosses.get(bossIndex).getName() == "Ms Jaime" && i == 0) {
            enemyProjectiles.add(new ProjectileObject(30, 14, 4, new Color((float)Math.random(), (float)Math.random(), (float)Math.random()), bossX, bossY, user.getX(), user.getY(), 10));
            enemyProjectiles.add(new ProjectileObject(-30, 14, 4, new Color((float)Math.random(), (float)Math.random(), (float)Math.random()), bossX, bossY, user.getX(), user.getY(), 10));
        }
    }

    public void spawnEnemy(int maxBosses, int maxEnemies, int frameDelay) {
        if(game) {
            maxEnemies += difficulty / 300000000 * 2;
            enemyClock++;
            enemyClock %= (frameDelay - (difficulty / 10000000));
            if(enemyClock == 0 && enemies.size() < maxEnemies) {
                int x = 0;
                int y = 0;
                int ranNum = (int)(Math.random() * 4) + 1;//random number 1-4
                if(ranNum == 1)//spawns north
                    x = (int)(Math.random() * fWidth);
                else if(ranNum == 2) {//spawns south
                    x = (int)(Math.random() * fWidth);
                    y = fHeight - 30;
                } else if(ranNum == 3) {//spawns east
                    y = (int)(Math.random() * fHeight);
                    x = fWidth;
                } else// spawns west
                    y = (int)(Math.random() * fHeight);
                enemies.add(new EnemyObject(25, fWidth, fHeight, x, y, Color.BLACK, 3 + difficulty / 200000000));
                enemyShotClock.add(0);
            }

            if((int)(Math.random() * difficulty) > 1200000000 && bosses.size() < maxBosses + score / 100000) {
                int bossSpawnFrameDelay = 180;
                if(user.getLevel() == 20)
                    bossSpawnFrameDelay -= 25;
                if((int)(time / 60) < 150)
                    bossSpawnFrameDelay -= (int)(time / 60);

                if((int)(Math.random() * bossSpawnFrameDelay) == 0 && (int)(Math.random() * (2147400001 - difficulty) / 100000000) < 2) {
                    boolean JL = false;
                    boolean TP = false;
                    boolean J = false;
                    boolean JG = false;
                    boolean P = false;
                    boolean MJ = false;

                    for(int b = 0; b < bosses.size(); b++) {
                        String bossName = bosses.get(b).getName();
                        if(bossName == "Justin Liu") 
                            JL = true;
                        else if (bossName == "Thanatcha Panpairoj") 
                            TP = true;
                        else if (bossName == "Jack Weng")
                            J = true;
                        else if (bossName == "James Gosling")
                            JG = true;
                        else if (bossName == "Pinata")
                            P = true;
                        else if (bossName == "Ms Jaime")
                            MJ = true;
                    }

                    int bossNum = (int)(Math.random() * 12) + 1;
                    if((bossNum == 1 || bossNum == 2 || bossNum == 3) && !JL)
                        bosses.add(new JustinLiu(40 + score / 4000, fWidth, fHeight));
                    else if((bossNum == 4 || bossNum == 5 || bossNum == 6) && !TP)
                        bosses.add(new ThanatchaPanpairoj(40 + score / 4000, fWidth, fHeight));
                    else if((bossNum == 7 || bossNum == 8 || bossNum == 9) && !J)
                        bosses.add(new JackWeng(40 + score / 4000, fWidth, fHeight));
                    else if (bossNum == 10 && !JG)
                        bosses.add(new JamesGosling(45 + score / 3000, fWidth, fHeight));
                    else if (bossNum == 11 && !P)
                        bosses.add(new Pinata(45 + score / 3000, fWidth, fHeight));
                    else if (bossNum == 12 && !MJ)
                        bosses.add(new MsJaime(45 + score / 3000, fWidth, fHeight));

                    //                     if(!MJ)
                    //                         bosses.add(new MsJaime(45 + score / 3000, fWidth, fHeight));

                    bossShotClock.add(33);
                }
            }
        }
    }

    public boolean isGame() {
        return game;
    }

    public int getScore() {
        return score;
    }

    public int getUserStamina()
    {
        return user.getStamina();
    }

    public void changeShotMode(int mode) {
        if(mode == 1 && user.getLevel() > 9)
            shotMode = 1;
        else if(mode == 2)
            shotMode = 2;
        else
            shotMode = 0;
        framesToDisplayShotMode = 150;
    }

    public int getShotMode() {
        return shotMode;
    }

    public void restart() {
        user = new UserObject(25, fWidth / 2, fHeight / 2, Color.BLUE);
        score = 0;

        grid = new GridObject(fWidth, fHeight);

        framesToDisplayInstructions = 600;

        shotClock = 0;
        enemyClock = 0;
        previousTCount = 0;
        time = 0;
        lastShotAngle = 0;
        shotsFired = 0;
        shotsHit = 0;
        shotMode = 0;

        difficulty = 0;

        userProjectiles = new ArrayList<ProjectileObject>();
        enemyProjectiles = new ArrayList<ProjectileObject>();
        enemies = new ArrayList<EnemyObject>();
        bosses = new ArrayList<Boss>();
        enemyShotClock = new ArrayList<Integer>();
        bossShotClock = new ArrayList<Integer>();

        game = true;
    }
}
